#!/usr/bin/env bash

set -euo pipefail

command_exists() {
  type "${1}" >/dev/null 2>&1
}

ensure_command() {
  if ! command_exists "${1}"; then
    echo "command not found: ${1}"
    exit 1
  fi
}

list_devices() {
  local -r device_type="${1}"
  pactl list short "${device_type}s"
}

describe_device() {
  local -r device_type="${1}"
  local -r index=$(( ${2} ))
  local -r key="${3}"

  local delim=":"
  if [[ "${key}" = *"."* ]]; then
    delim='"'
  fi

  pacmd list-"${device_type}s" \
    | sed -n "/index: ${index}/,/index: /{/index: /!p;}" \
    | grep -e "${key}" | cut -d "${delim}" -f2 | head -1 \
    | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

pick_device() {
  local -r device_type="${1}"

  local -a devices
  mapfile -t devices < <(list_devices "${device_type}")

  local index
  local -a choices=()
  for device in "${devices[@]}"; do
    index="$(echo "${device}" | awk '{print $1}')"
    if [[ "$(describe_device "${device_type}" "${index}" "flags")" = *HARDWARE* ]]; then
      choices+=("${index} $(describe_device "${device_type}" "${index}" "device.description")")
    fi
  done

  printf "%s\n" "${choices[@]}" | fzf | cut -d' ' -f1
}

ensure_command fzf
ensure_command pacmd
ensure_command pactl

case "${1}" in
  input|source)
    pactl set-default-source "$(pick_device source)"
    ;;
  output|sink)
    pactl set-default-sink "$(pick_device sink)"
    ;;
esac
