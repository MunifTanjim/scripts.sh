#!/usr/bin/env zx
// vim: set filetype=javascript :

import { Cloudflare } from "./zx/cloudflare.mjs";
import { Tailscale } from "./zx/tailscale.mjs";

$.verbose = false;

const DOMAIN_NAME = "muniftanjim.dev";
const DNS_RECORD_NAMESPACE = "tailscale";
const DNS_RECORD_SUFFIX_PATTERN = new RegExp(
  `\\.${DNS_RECORD_NAMESPACE}\\.${DOMAIN_NAME.replace(".", "\\.")}`
);

const cloudflare = new Cloudflare({
  name: "sync-cloudflare-dns-records-with-tailscale",
});
const tailscale = new Tailscale();

const machines = await tailscale.getMachines();

await cloudflare.ensureToken();

const { id: zoneId } = await cloudflare.getZone({ domainName: DOMAIN_NAME });

const dnsRecords = await cloudflare.listDnsRecords({
  zoneId,
  filter: (item) => DNS_RECORD_SUFFIX_PATTERN.test(item.name),
});

const dnsRecordByMachineName = dnsRecords.reduce((byMachineName, dnsRecord) => {
  const machineName = dnsRecord.name.replace(DNS_RECORD_SUFFIX_PATTERN, "");
  byMachineName[machineName] = dnsRecord;
  return byMachineName;
}, {});

const machineByName = machines.reduce((byName, machine) => {
  byName[machine.name] = machine;
  return byName;
}, {});

for (const [
  machineName,
  { id: dnsRecordId, name: dnsRecordName, content: dnsRecordContent },
] of Object.entries(dnsRecordByMachineName)) {
  const machine = machineByName[machineName];

  if (!machine) {
    await cloudflare.deleteDnsRecord({
      zoneId,
      dnsRecordId,
      dnsRecordName,
    });

    continue;
  }

  const { ip } = machine;

  if (ip !== dnsRecordContent) {
    await cloudflare.updateDnsRecord({
      zoneId,
      dnsRecordId,
      dnsRecordName,
      dnsRecordContent: ip,
    });

    continue;
  }
}

for (const [machineName, { ip }] of Object.entries(machineByName)) {
  const dnsRecord = dnsRecordByMachineName[machineName];

  if (!dnsRecord) {
    const dnsRecordName = `${machineName}.${DNS_RECORD_NAMESPACE}.${DOMAIN_NAME}`;

    await cloudflare.createDnsRecord({
      zoneId,
      dnsRecordName,
      dnsRecordContent: ip,
    });

    continue;
  }
}
