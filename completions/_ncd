#compdef ncd

__debug() {
  echo "$@" >> /tmp/ncd_debug
}

__ncd_caching_policy() {
  local -a oldp
  oldp=( "${1}"(Nmh+12) ) # 12 hours
  (( ${#oldp} ))
}

__ncd_dc_containers() {
  integer ret=1

  if ! zstyle -t ":completion:${curcontext%:*}:" cache-policy; then
    zstyle ":completion:${curcontext%:*}:" cache-policy __ncd_caching_policy
  fi

  if ! zstyle -t ":completion:${curcontext%:*:*}:*:dc:containers" sort; then
    zstyle ":completion:${curcontext%:*:*}:*:dc:containers" sort false
  fi

  local cachename="_ncd_dc_containers"

  if ( [[ ${(P)+cachename} -eq 0 ]] || _cache_invalid "${cachename#_}" ) \
    && ! _retrieve_cache "${cachename#_}"; then
      local workspace_dir="$(ncd workspace)"
      _message "reading docker containers..."
      _ncd_dc_containers=($(cat "$(ncd workspace)/docker-compose.yml" | rq --input-yaml | jq -r '.services | keys | .[]'))
      _store_cache ${cachename#_} _ncd_dc_containers
  fi

  _describe -t containers "docker containers" _ncd_dc_containers \
    && ret=0

  return ret
}

__ncd_dc_commands() {
  integer ret=1

  if ! zstyle -t ":completion:${curcontext%:*}:" cache-policy; then
    zstyle ":completion:${curcontext%:*}:" cache-policy __ncd_caching_policy
  fi

  if ! zstyle -t ":completion:${curcontext%:*:*}:*:dc:commands" sort; then
    zstyle ":completion:${curcontext%:*:*}:*:dc:commands" sort false
  fi

  local cachename="_ncd_dc_commands"

  if ( [[ ${(P)+cachename} -eq 0 ]] || _cache_invalid "${cachename#_}" ) \
    && ! _retrieve_cache "${cachename#_}"; then
      _message "reading ncd dc commands..."
      _ncd_dc_commands=(${(f)"$(ncd dc --help | sed '1,/Commands:/d' | sed '/^$/,$d' | sed 's/^  //' | sed 's/^\([^ ]*\) */\1:/g')"})
      _store_cache ${cachename#_} _ncd_dc_commands
  fi

  _describe -t commands "${words[2]} commands" _ncd_dc_commands \
    && ret=0

  return ret
}

__ncd_arguments() {
  integer ret=1

  case "${words[1]}" in
    config)
      _message "Enter config key" && ret=0
      ;;
    ec2_ip)
      _message "Enter pattern for EC2 name" && ret=0
      ;;
    dc)
      local curcontext="${curcontext}" state

      _arguments -C \
        '1: :->command' \
        '*: :->argument' \
        && ret=0

      case "${state}" in
        command)
          __ncd_dc_commands && ret=0
          ;;
        argument)
          _message "Enter arguments for ncd dc ${words[2]}" && ret=0
          case "${words[$CURRENT]}" in
            -*)
              ;;
            *)
              __ncd_dc_containers && ret=0
              ;;
          esac
          ;;
      esac
      ;;
  esac

  return ret
}

__ncd_commands() {
  local -a _ncd_commands
  _ncd_commands=("ec2_ip" "dc")

  _describe -t ncd-commands "commands" _ncd_commands
}

_ncd() {
  setopt localoptions typesetsilent

  local context curcontext="${curcontext}" state state_descr line
  local -A opt_args
  integer ret=1

  _arguments -C \
    '1: :->command' \
    '*:: :->argument' \
    && ret=0

  case "${state}" in
    command)
      __ncd_commands && ret=0
      ;;
    argument)
      curcontext="${curcontext%:*}:${words[1]}:"
      __ncd_arguments && ret=0
      ;;
  esac

  return ret
}

_ncd $@
