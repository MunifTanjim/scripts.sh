#!/usr/bin/env bash

command_exists() {
  type "${1}" >/dev/null 2>&1
}

function_exists() {
  declare -F "${1}" >/dev/null
}

ensure_command() {
  if ! command_exists "${1}"; then
    echo "command not found: ${1}"
    exit 1
  fi
}

ensure_file() {
  if ! [[ -e "${1}" ]]; then
    echo "file not found: ${1}"
    exit 1
  fi
}

config() {
  local -r query="${1}"
  if [[ -z "${ncd_config}" ]]; then
    ensure_file ~/.newscred.yaml
    declare -g ncd_config=$(cat ~/.newscred.yaml | rq --input-yaml | jq -r '.ncd')
  fi
  echo $ncd_config | jq -r "${query}"
}

ncd_workspace() {
  local dir="$(cat ~/.newscred.yaml | rq --input-yaml | jq -r '.workspace')"
  dir="${dir/#\~/${HOME}}"
  echo "${dir}"
}

ncd_completion() {
  local dir="$(realpath "${BASH_SOURCE[0]}")"
  dir="${dir%/*}"
  cat "${dir}/completions/_ncd"
}

ncd_config() {
  config $1
}

ncd_ec2_ip() {
  exec aws-ec2-ip $@
}

ncd_on_aws() {
  echo "Checking AWS Login Status..."

  if ! aws sts get-caller-identity --query "Account" >/dev/null 2>&1; then
    aws sso login
  fi

  rm -f "${XDG_CACHE_HOME}/newscred_aws_codeartifact_off"
}

ncd_off_aws() {
  echo "Turning Off AWS CodeArtifact Token Check..."

  touch "${XDG_CACHE_HOME}/newscred_aws_codeartifact_off"
}

ncd_on_docker() {
  echo "Checking Docker Desktop..."

  osascript >/dev/null <<EOL
  if not (application "Docker Desktop" is running) then
    tell application "Docker Desktop" to activate
  end if
EOL
}

ncd_off_docker() {
  echo "Closing Docker Desktop..."

  osascript >/dev/null <<EOL
  if application "Docker Desktop" is running then
    tell application "System Events" to tell process "Docker Desktop" 
      tell menu bar item 1 of menu bar 2
        click
        tell menu 1
          click menu item "Quit Docker Desktop"
        end tell
      end tell
    end tell
  end if
EOL
}

ncd_on_vpn() {
  echo "Checking VPN Connection..."

  local -r openvpn_connect="/Applications/OpenVPN Connect/OpenVPN Connect.app/contents/MacOS/OpenVPN Connect"
  local -r profile_name="vpn.newscred.com [newscred]"

  osascript >/dev/null <<EOL
  if not (application "OpenVPN Connect" is running) then
    do shell script "'${openvpn_connect}' --minimize --skip-startup-dialogs"
  end if

  tell application "System Events" to tell process "OpenVPN Connect" 
    repeat until menu bar item 1 of menu bar 2 exists
      delay 0.1
    end repeat

    tell menu bar item 1 of menu bar 2
      click
      tell menu 1
        click
        if (menu item "Connect" exists) or not (menu item "${profile_name}" exists) then
          tell menu item 3
            click
            click menu item "${profile_name}" of menu 1
          end tell
        else
          key code 53 -- <esc> close menu
        end if
      end tell
    end tell
  end tell
EOL
}

ncd_off_vpn() {
  echo "Disconnecting VPN..."

  osascript >/dev/null <<EOL
  if application "OpenVPN Connect" is running then
    tell application "System Events" to tell process "OpenVPN Connect" 
      tell menu bar item 1 of menu bar 2
        click
        tell menu 1
          click
          if menu item "Disconnect" exists then
            click menu item "Disconnect"
          else
            key code 53 -- <esc> close menu
          end if
        end tell
      end tell
    end tell
  end if
EOL
}

ncd_on() {
  ncd_on_aws
  ncd_on_vpn
  ncd_on_docker
}

ncd_off() {
  ncd_off_aws
  ncd_off_vpn
  ncd_off_docker
}

ncd_dc() {
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
  pyenv activate localdev
  nc-docker $@
}

ncd_list_container() {
  cat "$(ncd workspace)/docker-compose.yml" | rq --input-yaml | jq -r '.services | keys | .[]'
}

ncd_list_repo() {
  find "$(ncd workspace)" -maxdepth 2 -type d -name '.git'  | xargs dirname | xargs -n1 basename
}

ncd_list_repo_window() {
  local -a windows=()

  while IFS= read -r window; do
    if test -n "${window}"; then
      local window_id="$(echo "${window}" | awk '{ print $2 }' )" 
      local tag="$(tmux show-option -w -t "${window_id}" -qv '@ncd_repo_window')"
      if [[ -n "${tag}" ]]; then
        windows+=("${tag}")
      fi
    fi
  done <<< "$(tmux list-windows -F '#{window_active} #{window_id} #W')"

  if (( ${#windows[@]} )); then
    printf '%s\n' "${windows[@]}"
  fi
}

ncd_list() {
  local -r thing="${1:-}"
  shift

  if test -z "${thing}"; then
    echo "missing thing"
    exit 1
  fi

  local -r func="ncd_list_${thing}"

  if ! function_exists "${func}"; then
    echo "invalid thing: ${thing}"
    exit 1
  fi

  $func $@
}

ncd_repo() {
  local repo="${1:-}"
  shift

  if test -z "${repo}"; then
    repo="$(ncd list:repo_window | fzf --exit-0)"
  fi

  if test -z "${repo}"; then
    repo="$(ncd list:repo | fzf)"
  fi

  if test -z "${repo}"; then
    echo "missing repo"
    exit 1
  fi

  if ! test -d "$(ncd workspace)/${repo}"; then
    echo "invalid repo"
    exit 1
  fi

  local windows="$(tmux list-windows -F '#{window_active} #{window_id} #W')"

  while IFS= read -r window; do
    if test -n "${window}"; then
      local window_id="$(echo "${window}" | awk '{ print $2 }' )" 
      if [[ "${repo}" = "$(tmux show-option -w -t "${window_id}" -qv '@ncd_repo_window')" ]]; then
        tmux select-window -t "${window_id}"
        exit 0
      fi
    fi
  done <<< "${windows}"

  local window_id="$(tmux new-window -n ":${repo}" -c "$(ncd workspace)/${repo}" -P -F '#{window_id}')" "nvim"
  tmux set-option -w -t "${window_id}" '@ncd_repo_window' "${repo}"
}

ncd_git_sync() {
  local current_branch
  current_branch="$(git branch --show-current)"

  case "${current_branch}" in
    master)
      git pull newscred master 
      git push
      ;;
    stable-master)
      git pull stable-newscred master
      git push -u stable-origin stable-master:master
      ;;
  esac
}

ncd_git_rebase() {
  local current_branch
  current_branch="$(git branch --show-current)"

  case "${current_branch}" in
    master|stable-master)
      ;;
    sync-*)
      git rebase -i stable-master
      ;;
    *)
      git rebase -i master
      ;;
  esac
}

ncd_git() {
  local -r cmd="${1}"
  shift

  local -r func="ncd_git_${cmd}"

  if ! function_exists "${func}"; then
    echo "invalid thing: ${thing}"
    exit 1
  fi

  $func $@
}

ncd() {
  local -r cmd="${1}"
  shift

  if [[ -z "${cmd}" ]]; then
    echo "no command given!"
    exit 1
  fi

  local -r func="ncd_${cmd//:/_}"

  if ! function_exists "${func}"; then
    echo "invalid command: ${cmd}"
    exit 1
  fi

  $func $@
}

ensure_command aws
ensure_command fzf
ensure_command jq
ensure_command rq

ncd $@
